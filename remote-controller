#!/usr/bin/python3
# -*- coding: utf-8 -*-
# vim: ts=4 sw=4 tw=100 et ai si

import os
import sys
import argparse
from modules import Procs
from modules.GUI import Window, Toplevel1

VERSION = "0.1"
OWN_NAME = "remote-controller"

def parse_arguments():
    """A helper function which parses the input arguments."""

    text = sys.modules[__name__].__doc__
    parser = argparse.ArgumentParser(description=text, prog=OWN_NAME)

    text = "IP of the devise to send controls to."
    parser.add_argument("ip", metavar="IP", help=text)

    text = "Port on the devise to send controls to."
    parser.add_argument("outport", type=int, metavar="OUTPORT", help=text)

    text = "Controller device path."
    parser.add_argument("device", metavar="CONTROLLER", help=text)

    text = "Path to controller layout file."
    parser.add_argument("layout", metavar="LAYOUT", help=text)

    text = "Port on the devise to receive data on."
    parser.add_argument("inport", type=int, metavar="INPORT", help=text)

    text = "URLs for cameras."
    parser.add_argument("cams", metavar="CAM", nargs=3, help=text)


    text = "Print version and exit."
    parser.add_argument("--version", action="version", help=text, version=VERSION)

    return parser.parse_args()

def update_dials(proc, window):
    """A task to update dials."""

    data = proc.get_last_line()
    # If nothing in stdout of the proc, then there is nothing to do.
    if not data:
        return

    data = json.loads(data)

    window.top_level.update_dials(data)

    update_dials_helpers = lambda: update_dials(proc, window)
    window.root.after(100, update_dials(proc, window))

def keep_alive(procs, window):
    """Keep subprocesses alive."""

    for proc in procs:
        proc.keep_alive(errout=True)

    keep_alive_helper = lambda: keep_alive(procs, window)
    window.root.after(1000, keep_alive_helper)

def main():
    """Main entry point for the script."""

    args = parse_arguments()

    root = tk.Tk()
    top = Toplevel1(root, args.cams, tk)
    window = Window(root, top)

    # Start background processes which will handle controller input and receiving the data from vehicle.
    receiver = Procs.Proc("./_remote-receiver %s" % args.inport)
    cmd = "./_remote-controller %s %s %s %s" % (str(args.ip), args.outport, str(args.device), str(args.layout))
    controller = Procs.Proc(cmd)

    if not all([receiver.alive(), controller.alive()]):
        raise Exception("one of the subprocesses did not start correctly")

    # Using 'lambda' makes it possible to delay the call of these functions until later.
    update_dials_helpers = lambda: update_dials(receiver, window)
    window.root.after(100, update_dials_helpers)
    keep_alive_helper = lambda: keep_alive([receiver, controller], window)
    window.root.after(1000, keep_alive_helper)

    try:
        window.root.mainloop()
    except KeyboardInterrupt:
        window.destroy_window()
        for proc in (receiver, controller):
            proc.kill()

    return 0

if __name__ == '__main__':
    sys.exit(main())

